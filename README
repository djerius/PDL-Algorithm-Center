PDLx::Algorithm::Center
    Various methods of finding the center of a sample

FUNCTIONS
  sigma_clip
    Center a dataset by iteratively excluding data outside of a radius equal
    to a specified number of standard deviations

    Elements may be individually weighted.

    Usage:

      $results = sigma_clip( coords => $coords,
                             weight => $weight,
                             mask   => $mask,
                             %opts);

      $results = sigma_clip( weight => $img, %opts);

    sigma_clip finds the center of a data set by:

    1   ignoring the data whose distance to the current center is a
        specified number of standard deviations

    2   calculating a new center by performing a (weighted) centroid of the
        remaining data

    3   calculating the standard deviation of the distance from the data to
        the center

    4   repeat at step 1 until either a convergence tolerance has been met
        or the iteration limit has been exceeded

    The initial center may be explicitly specified, or may be calculated by
    performing a (weighted) centroid of the data.

    The initial standard deviation is calculated using the initial center
    and either the entire dataset, or from a clipped region about the
    initial center.

   Options
    The following (case-insensitive) options are available:

    "coords" => *arrayref|piddle*
            *Optional* (see "weight")

            The coordinates to center. "coords" may be either a *N* element
            list of piddles of shape *M* or a single piddle of shape *NxM*,
            where

            *N* is the number of dimensions in the data
            *M* is the number of data elements

            "coords" is useful if the data are sparse; for dense data, use
            "weight" instead.

            "weight" may be specified with coords for sparse, weighted data.

    "weight" => *piddle*
            *Optional* (see "coords")

            Data weights.

            For sparse data (i.e., when used with "coords") "weight" must be
            a piddle of shape *M*, where *M* is the number of data elements
            in "coords".

            For densely packed data, "weight" is a piddle of shape *NxM*,
            where

            *N* is the number of dimensions in the data
            *M* is the number of data elements

    "mask" = *piddle*
            *Optional*

            This specifies data elements to ignore completely. True values
            indicate elements to be used, false those to be ignored.

            For sparse data (i.e., when used with "coords") "mask" must be a
            piddle of shape *M*, where *M* is the number of data elements in
            "coords".

            For densely packed data, "mask" should have the same shape as
            "weight".

    "nsigma" => *float*
            *Required*

            The number of standard deviations at which to clip.

    clip => *scalar|arrayref*
            *Optional*

            The clipping radius used to determine the initial standard
            deviation.

    "center|centre" => *arrayref*|*1D piddle*
            *Optional*

            The initial center. Defaults to the (weighted) average of the
            data.

    "is_converged" => *subroutine reference*
            *Optional*

            A subroutine which determines whether the iterations have
            converged. It is called with two iteration objects which contain
            information about the previous and current iterations, i.e.

                $stop_iteration = is_converged( $last, $current );

            The structure of the objects is described in "Iteration
            Results".

            It should return true if convergence has been achieved, false
            otherwise.

            The "is_converged" routine is passed references to the actual
            objects used by sigma_clip to keep track of the iterations. This
            means that the "is_converged" routine may manipulate the
            starting point for the next iteration by altering its $current
            parameter.

            The default behavior is to stop if both the standard deviation
            and center have not changed between iterations, or if the "dtol"
            option was specified, the centers are closer than "dtol".

    "iterlim" => *integer*
            *Optional*

            The maximum number of iterations to run. Defaults to 10.

    "dtol" => *float*
            *Optional*

            If specified, and the default convergence behavior is in use
            (see the "is_converged" option) iteration will cease when
            successive centers are closer than the specified distance.

    "log" => *subroutine reference*
            *Optional*

            A subroutine which will be called at the end of each iteration.
            It is passed a copy of the current iteration's results object
            see "Iteration Results").

   Iteration Results
    The results for each iteration are stored in object of class
    "PDLx::Algorithm::Center::sigma_clip::Iteration" with the following
    attributes/methods:

    "center" => *piddle|undef*
        A 1D piddle containing the derived center. The value for the last
        iteration will be undefined if all of the elements have been
        clipped.

    "iter" => *integer*
        The iteration index. An index of 0 indicates the values determined
        before the iterative loop was entered, and reflects the initial
        clipping and mask exclusion.

    "nelem" => *integer*
        The number of data elements used in the center.

    "weight" => *float*
        The combined weight of the data elements used to determine the
        center.

    "sigma" => *float|undef*
        The standard deviation of the data. The value for the last iteration
        will be undefined if all of the elements have been clipped.

    "variance" => *float|undef*
        The calculated variance (i.e., "sqrt( sigma )". The value for the
        last iteration will be undefined if all of the elements have been
        clipped.

    "clip" => *float|undef*
        The clipping radius. This will be undefined for the first iteration
        if the "clip" option was not specified.

    "dist" => *float*
        *Optional*

        The distance between the previous and current centers. This is
        present only if the default convergence routine is in use.

   Returned Results
    sigma_clip returns an object of class
    "PDLx::Algorithm::Center::sigma_clip::Result". It is a subclass of
    "PDLx::Algorithm::Center::sigma_clip::Iteration" (the common attributes
    refer to the results of the final iteration) with these additional
    attributes/methods:

    "iterations" => *arrayref*
        A list of the iteration result objects.

    "success" => *boolean*
        True if the iteration converged, false otherwise.

    "error" => *error object*
        If convergence has failed, this will contain an error object
        describing the failure. See "Errors".

   Errors
    Errors are represented as objects in the following classes:

    Parameter Validation
        These are unconditionally thrown.

          PDLx::Algorithm::Center::parameter
          PDLx::Algorithm::Center::parameter::type
          PDLx::Algorithm::Center::parameter::dimension
          PDLx::Algorithm::Center::parameter::missing
          PDLx::Algorithm::Center::parameter::value

    Iteration
        These are stored in the result object's "error" attribute.

          PDLx::Algorithm::Center::iteration::limit_reached
          PDLx::Algorithm::Center::iteration::empty

    The objects stringify to a failure message.

AUTHOR
    Diab Jerius, <djerius@cpan.org>

COPYRIGHT AND LICENSE
    Copyright 2016 Smithsonian Astrophysical Observatory

    This software is released under the GNU General Public License. You may
    find a copy at

              http://www.gnu.org/licenses

